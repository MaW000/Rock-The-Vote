{"ast":null,"code":"var _jsxFileName = \"/home/maw/prod/LVL6/RTV2/client/src/components/Public/components/comments.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useContext, useState, useEffect } from 'react';\nimport { UserContext } from '../../../context/UserProvider.js';\nimport SingleComment from './singleComment.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Comments(props) {\n  _s();\n\n  const {\n    userAxios\n  } = useContext(UserContext);\n  const [commentLists, setCommentLists] = useState([]);\n  const [showComments, setShowComments] = useState(true);\n  const [commentValue, setCommentValue] = useState('');\n  const variable = {\n    issueId: props.issueId\n  };\n\n  const userId = JSON.parse(localStorage.getItem('user'))._id;\n\n  useEffect(() => {\n    userAxios.post('/api/comment/getComments', variable).then(response => {\n      if (response.data.success) {\n        console.log('response.data.comments', response.data.comments);\n        setCommentLists(response.data.comments);\n      } else {\n        alert('Failed to get video Info');\n      }\n    });\n  }, []);\n\n  const handleChange = e => {\n    setCommentValue(e.currentTarget.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const variables = {\n      content: commentValue,\n      writer: userId,\n      issueId: props.issueId\n    };\n    userAxios.post('/api/comment/saveComment', variables).then(res => {\n      if (res.data.success) {\n        setCommentValue('');\n      } else {\n        alert('Failed to save Comment');\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showComments ? /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => setShowComments(!showComments),\n      style: {\n        cursor: 'pointer'\n      },\n      children: \"Show Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }, this) : commentLists.map((comment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            borderRadius: '5px'\n          },\n          onChange: handleChange,\n          value: commentValue,\n          placeholder: \"write your comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Post Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), commentLists && /*#__PURE__*/_jsxDEV(SingleComment, {\n        comment: comment,\n        issueId: props.issueId,\n        refreshFunction: props.refreshFunction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => setShowComments(!showComments),\n        style: {\n          cursor: 'pointer'\n        },\n        children: \"Close Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n}\n\n_s(Comments, \"sJoFXD5crXNVyPrFTfhsSbFGLpU=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["axios","React","useContext","useState","useEffect","UserContext","SingleComment","Comments","props","userAxios","commentLists","setCommentLists","showComments","setShowComments","commentValue","setCommentValue","variable","issueId","userId","JSON","parse","localStorage","getItem","_id","post","then","response","data","success","console","log","comments","alert","handleChange","e","currentTarget","value","onSubmit","preventDefault","variables","content","writer","res","cursor","map","comment","index","borderRadius","refreshFunction"],"sources":["/home/maw/prod/LVL6/RTV2/client/src/components/Public/components/comments.js"],"sourcesContent":["import axios from 'axios'\r\nimport React, { useContext,useState , useEffect } from 'react'\r\nimport { UserContext } from '../../../context/UserProvider.js'\r\nimport SingleComment from './singleComment.js'\r\n\r\nfunction Comments(props) {\r\n    const { userAxios } = useContext(UserContext)\r\n    const [commentLists, setCommentLists] = useState([])\r\n    const [showComments, setShowComments] = useState(true)\r\n    const [commentValue, setCommentValue] = useState('')\r\n    const variable = {issueId: props.issueId}\r\n    const userId = JSON.parse(localStorage.getItem('user'))._id\r\n    useEffect(() => {\r\n        \r\n        userAxios.post('/api/comment/getComments', variable)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    console.log('response.data.comments',response.data.comments)\r\n                    setCommentLists(response.data.comments)\r\n                } else {\r\n                    alert('Failed to get video Info')\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const handleChange = (e) => {\r\n        setCommentValue(e.currentTarget.value)\r\n    }\r\n    \r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const variables = {\r\n            content: commentValue,\r\n            writer: userId,\r\n            issueId: props.issueId\r\n        }\r\n        userAxios.post('/api/comment/saveComment', variables)\r\n            .then(res => {\r\n                if(res.data.success) {\r\n                    setCommentValue('')\r\n                } else {\r\n                    alert('Failed to save Comment')\r\n                }\r\n            })\r\n    }\r\n\r\n  return (\r\n    <>  \r\n        {showComments ? <p onClick={() => setShowComments(!showComments)} style={{cursor: 'pointer'}}>Show Comments</p>: commentLists.map((comment, index) => (\r\n            <div>\r\n                <h3>Comments</h3>\r\n                <form onSubmit={onSubmit}>\r\n                    <input\r\n                        style={{ borderRadius: '5px'}}\r\n                        onChange={handleChange}\r\n                        value={commentValue}\r\n                        placeholder='write your comment' \r\n                    />\r\n                    <br/>\r\n                    <button>Post Comment</button>\r\n                </form>\r\n                {commentLists && <SingleComment comment={comment} issueId={props.issueId} refreshFunction={props.refreshFunction} />}\r\n                <p onClick={() => setShowComments(!showComments)} style={{cursor: 'pointer'}}>Close Comments</p>\r\n            </div>\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Comments"],"mappings":"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"},"metadata":{},"sourceType":"module"}